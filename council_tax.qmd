---
title: "Council_Tax"
author: "Adam Dennett"
format: html
editor: visual
---

```{r}
#| echo: false

library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(readODS)
library(janitor)

# Step 1: Download the latest council tax Band D data
url <- "https://assets.publishing.service.gov.uk/media/680a37d26d6ac02ee99d845f/Table_8_2025-26.ods"
download.file(url, destfile = "data/Table_8_2025-26.ods", mode = "wb")  # 'wb' ensures binary mode

# Step 2: Read the Excel file (adjust sheet name and range as needed)
#df <- readODS::read_ods("data/Table_8_2025-26.ods", sheet = 1)
# Read the first sheet (default is sheet 1)
table8a <- read_ods("data/Table_8_2025-26.ods", sheet = "Table_8a", skip = 2) |>
  janitor::clean_names()

table8a <- table8a |>
  rename(
    avg_ctax_band_d_ex_asc_pp = average_council_tax_for_the_authority_including_adult_social_care_excluding_parish_precepts_band_d,
    pct_chg_ctax_band_d_ex_asc_pp = percentage_change_of_average_council_tax_for_the_authority_including_adult_social_care_excluding_parish_precepts_band_d_percent,
    avg_ctax_band_d_inc_asc_pp = average_council_tax_for_the_authority_including_adult_social_care_and_parish_precepts_band_d,
    pct_chg_ctax_band_d_inc_asc_pp = percentage_change_of_average_council_tax_for_the_authority_including_adult_social_care_and_parish_precepts_band_d_percent,
    asc_element_band_d = adult_social_care_element_of_average_band_d_council_tax,
    pct_chg_asc_element_band_d = percentage_change_of_adult_social_care_element_of_average_band_d_council_tax_percent
  )

str(table8a)


# Step 3: Clean and select relevant columns
table8a <- table8a %>%
  mutate(Country = if_else(str_detect(ons_code, "^W"), "Wales", "England"))

# Step 4: Define multipliers
multipliers_eng <- c(A = 6/9, B = 7/9, C = 8/9, D = 1, E = 11/9, F = 13/9, G = 15/9, H = 18/9, I = NA)
multipliers_wales <- c(A = 5/9, B = 6/9, C = 7/9, D = 8/9, E = 11/9, F = 13/9, G = 15/9, H = 18/9, I = 21/9)

# Convert multipliers to a tidy tibble
band_multipliers <- bind_rows(
  tibble(Band = names(multipliers_eng), multiplier = multipliers_eng, Country = "England"),
  tibble(Band = names(multipliers_wales), multiplier = multipliers_wales, Country = "Wales")
)

# Expand table8a to include all bands
table8a_expanded <- table8a %>%
  left_join(band_multipliers, by = "Country") %>%
  mutate(
    estimated_ctax_by_band = avg_ctax_band_d_inc_asc_pp * multiplier
  )

table8a_wide <- table8a_expanded %>%
  select(ons_code, authority, Band, estimated_ctax_by_band) %>%
  pivot_wider(names_from = Band, values_from = estimated_ctax_by_band, names_prefix = "band_")

# Step 6: Save to CSV
#write.csv(df_bands, "council_tax_bands_2025_26.csv", row.names = FALSE)

```

| Band | England Multiplier | Wales Multiplier |
|------|--------------------|------------------|
| A    | 6/9                | 5/9              |
| B    | 7/9                | 6/9              |
| C    | 8/9                | 7/9              |
| D    | 1                  | 8/9              |
| E    | 11/9               | 11/9             |
| F    | 13/9               | 13/9             |
| G    | 15/9               | 15/9             |
| H    | 18/9               | 18/9             |
| I    |                    | 21/9             |

: England and Wales Council Tax Multipliers - <https://www.gov.uk/government/statistics/council-taxbase-2024-in-england/local-authority-council-taxbase-in-england-2024>


```{r}
# Define URL and destination paths
url <- "https://assets.publishing.service.gov.uk/media/6685496cab5fc5929851b92b/CTSOP1-1-1993-2024.zip"
dest_dir <- "data"
zip_path <- file.path(dest_dir, "CTSOP1-1-1993-2024.zip")

# Create the /data directory if it doesn't exist
if (!dir.exists(dest_dir)) {
  dir.create(dest_dir, recursive = TRUE)
}

# Download the ZIP file
download.file(url, destfile = zip_path, mode = "wb")

# Unzip the contents into the /data folder
unzip(zip_path, exdir = dest_dir)

# Optional: list the extracted files
list.files(dest_dir, recursive = TRUE)
```
```{r}
# Define the file path
file_path <- file.path("data", "CTSOP1_1_2024_03_31.csv")

# Read the CSV, treating custom strings as NA
stock_2024 <- read.csv(file_path, na.strings = c("N/A", "-", ".."), stringsAsFactors = FALSE)

# Optional: quick check on structure and missing values
str(stock_2024)
summary(stock_2024)
```
Time to reshape this stock file for LSOAs but include the nested geographies


```{r}
library(dplyr)

# Create a copy to work with
nested <- stock_2024

# Initialize new columns
nested <- nested %>%
  mutate(
    engwal_code = NA_character_, engwal_name = NA_character_,
    natl_code   = NA_character_, natl_name   = NA_character_,
    regl_code   = NA_character_, regl_name   = NA_character_,
    laua_code   = NA_character_, laua_name   = NA_character_,
    msoa_code   = NA_character_, msoa_name   = NA_character_
  )

# Initialize holders
engwal <- natl <- regl <- laua <- msoa <- list(code = NA, name = NA)

# Loop through rows
for (i in seq_len(nrow(nested))) {
  geo <- nested$geography[i]
  code <- nested$ecode[i]
  name <- nested$area_name[i]
  
  if (geo == "ENGWAL") {
    engwal <- list(code = code, name = name)
  } else if (geo == "NATL") {
    natl <- list(code = code, name = name)
  } else if (geo == "REGL") {
    regl <- list(code = code, name = name)
  } else if (geo == "LAUA") {
    laua <- list(code = code, name = name)
  } else if (geo == "MSOA") {
    msoa <- list(code = code, name = name)
  }
  
  # Assign current hierarchy to all rows
  nested$engwal_code[i] <- engwal$code
  nested$engwal_name[i] <- engwal$name
  nested$natl_code[i]   <- natl$code
  nested$natl_name[i]   <- natl$name
  nested$regl_code[i]   <- regl$code
  nested$regl_name[i]   <- regl$name
  nested$laua_code[i]   <- laua$code
  nested$laua_name[i]   <- laua$name
  nested$msoa_code[i]   <- msoa$code
  nested$msoa_name[i]   <- msoa$name
}

# Filter to just LSOA rows
lsoa_nested <- nested %>%
  filter(geography == "LSOA") %>%
  rename(
    lsoa_code = ecode,
    lsoa_name = area_name
  ) %>%
  select(
    geography, lsoa_code, lsoa_name,
    engwal_code, engwal_name,
    natl_code, natl_name,
    regl_code, regl_name,
    laua_code, laua_name,
    msoa_code, msoa_name,
    starts_with("band_"), all_properties
  )
```

Calculate the total Council Tax Income for each LSOA based on the banded data.

```{r}
library(dplyr)

# Step 1: Join council tax levels to LSOA data
lsoa_enriched <- lsoa_nested %>%
  left_join(table8a_wide, by = c("laua_code" = "ons_code"))

# Step 2: Calculate tax income per band
band_letters <- letters[1:9]  # a to i

for (b in band_letters) {
  dwell_col <- paste0("band_", b)
  tax_col   <- paste0("band_", toupper(b))
  income_col <- paste0("band_", b, "_tax_income")
  
  lsoa_enriched[[income_col]] <- lsoa_enriched[[dwell_col]] * lsoa_enriched[[tax_col]]
}

# Step 3: Calculate total council tax income
income_cols <- paste0("band_", band_letters, "_tax_income")

lsoa_enriched <- lsoa_enriched %>%
  mutate(total_ctax_income = rowSums(select(., all_of(income_cols)), na.rm = TRUE))
```

Map it

```{r}
library(sf)
library(leaflet)
library(dplyr)
library(viridis)

# Step 1: Read GeoJSON
lsoa_geo <- st_read("E:/council_tax/data/Lower_layer_Super_Output_Areas_December_2021_Boundaries_EW_BGC_V5_-7764840717091613250.geojson")

# Step 2: Join enriched data
lsoa_map_data <- lsoa_geo %>%
  left_join(lsoa_enriched, by = c("LSOA21CD" = "lsoa_code"))  # adjust if needed

# Step 3: Create Spectral palette using viridis
pal <- colorNumeric(
  palette = viridis(256, option = "C"),  # "C" is Spectral-like
  domain = lsoa_map_data$total_ctax_income,
  na.color = "#cccccc"
)

# Step 4: Build map
leaflet(data = lsoa_map_data) %>%
  addTiles() %>%
  addPolygons(
    fillColor = ~pal(total_ctax_income),
    weight = 0.5,
    opacity = 1,
    color = "white",
    fillOpacity = 0.7,
    label = ~paste0(LSOA21NM, ": Â£", format(round(total_ctax_income), big.mark = ",")),
    highlightOptions = highlightOptions(weight = 2, color = "#666", fillOpacity = 0.9, bringToFront = TRUE)
  ) %>%
  addLegend(
    pal = pal,
    values = ~total_ctax_income,
    title = "Estimated Council Tax Income",
    position = "bottomright"
  )
```

